---
  # Portions come from https://github.com/ansible/nginx-container as the source of ideas

  - block:

    - name: Check /usr/bin/dumb-init exists
      stat: path="/usr/bin/dumb-init"
      register: dumb_init_present


    - name: Container Setup | Install dumb init
      get_url:
        url: https://github.com/Yelp/dumb-init/releases/download/v{{ dumb_init_version }}/dumb-init_{{ dumb_init_version }}_amd64
        dest: /usr/bin/dumb-init
        owner: root
        group: root
        mode: 0775
        validate_certs: False
      when: dumb_init_present.stat.exists == False

    when: container_init == "standalone-dumb-init"

  - name: Container Setup | Update container user
    user:
      name: "{{container_user}}"
      uid: "{{container_uid}}"
      group: root
      createhome: no
    when: ansible_os_family == "Debian"

  - name: Container Setup | Update container user
    shell: "deluser {{container_user}} || true && adduser -u {{container_uid}} -G root -H -D {{container_user}}"
    when: ansible_os_family == "Alpine"

  - name: Container Setup | Nginx  | Create directories
    file:
      path: "{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0775
    with_items: "{{ nginx_directories }}"

  - name: Container Setup | Nginx  | Clear log files
    file:
      path: "/var/log/nginx/{{ item }}"
      state: absent
    with_items:
      - access.log
      - error.log

  - name: "Container Setup | Nginx  | Make directories owned by {{ container_user }}:root"
    command: chown {{ container_user }}:root {{ item }}
    with_items:
      - "{{ nginx_pid_dir }}"
      - "{{ nginx_static_dir }}"
      - /var/log/nginx
      - /var/lib/nginx

  - name: Container Setup | Nginx  | Make directories writable by root group
    command: chmod 775 {{ item }}
    with_items:
      - /var
      - /var/log
      - /var/lib

  - name: "Container Setup | Nginx  | Make directories writable to {{ container_user }}:root"
    command: chmod 775 {{ item }}
    with_items:
      - "{{ nginx_pid_dir }}"
      - "{{ nginx_static_dir }}"
      - /var/log/nginx
      - /var/lib/nginx

  - name: Container Setup | Nginx  | Link log files to stdout
    command: "ln -sf /dev/stdout /var/log/nginx/{{ item }}"
    with_items:
      - access.log
      - error.log

  - name: Container Setup | Nginx  | Remove /var/cache/nginx, if it exists
    file:
      path: /var/cache/nginx
      state: absent

  - name: Container Setup | Nginx  | Create /var/cache/nginx
    file:
      path: /var/cache/nginx/client_temp
      state: directory
      owner: "{{ container_user }}"
      group: root
      mode: 0775
      recurse: yes

  - name: Container Setup | Nginx  | Create tmp directories with correct permissions
    file:
      path: "/var/lib/nginx/{{ item }}"
      state: directory
      owner: "{{ container_user }}"
      group: root
      mode: 0775
    with_items:
      - tmp
      - tmp/client_body
      - tmp/fastcgi
      - tmp/proxy
      - tmp/scgi
      - tmp/uwsgi

  - name: Container Setup | DEBUG | put static assets inside container
    shell: "ls -la /tmp/"
    register: "shared_dir"

  - debug: var="shared_dir"

  - name: Container Setup | Nginx | put static assets inside container
    synchronize:
      src: "{{ item }}/"
      dest: "{{ nginx_static_dir }}/"
      rsync_opts: --checksum
    with_items: "{{ nginx_asset_dirs | default([]) }}"
    remote_user: nginx

  - name: Container Setup | Nginx | copy static assets within container
    shell: "cp -r {{ item }}/ {{ nginx_static_dir }}"
    # copy:
    #   src: "{{ item }}/"
    #   dest: "{{ nginx_static_dir }}/"
    #   remote_src: yes
    with_items: "{{ nginx_container_asset_dirs | default([]) }}"

  - name: Container Setup | Nginx | Itemize default nginx static assets
    find:
      paths: /usr/share/nginx/html
      recurse: yes
    when: "nginx_asset_dirs | length == 0  and  nginx_container_asset_dirs | length == 0"
    register: default_assets

  - name: Container Setup | Nginx | Copy default content when no static assets
    copy:
      src: "{{ item.path }}"
      dest: "{{ nginx_static_dir }}"
      remote_src: yes
      owner: "{{ container_user }}"
      group: root
      mode: 0664
    with_items: "{{ default_assets.files }}"
    when: "nginx_asset_dirs | length == 0 and  nginx_container_asset_dirs | length == 0"
